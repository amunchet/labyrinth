version: "3.2"
services:
  devel:
    container_name: "labyrinth_devel"
    environment:
      COMPOSE_CONVERT_WINDOWS_PATHS: 1
      CHOKIDAR_USEPOLLING: "true"
      TESTBED: 1

    build: ./frontend
    ports:
      - "8001:8000"
      - "8002:8080"
    networks:
      - labyrinth
    volumes:
      - ./frontend:/src
      - /src/labyrinth/node_modules

  backend:
    build: "backend"
    depends_on: 
      - mongo
      - redis
    ports:
      - "7000:7000"
    volumes:
      - ./backend/:/src
      - ./alertmanager:/alertmanager
      - ./frontend/labyrinth/public:/public
    networks:
      - labyrinth
    environment: 
      MONGO_USERNAME: root
      MONGO_PASSWORD: temp
      MONGO_HOST: mongo
      REDIS_HOST: redis
      TESTBED: 1
  

  # NGINX Frontend server
  frontend:
    image: nginx:latest
    restart: always
    depends_on:
      - lego
      - backend
      - alertmanager
    networks:
      - labyrinth
    user: ${CURRENT_UID}
    command: /entrypoint.sh
    volumes:
        - ./nginx/nginx.conf.development:/etc/nginx/nginx.conf:ro
        - ./nginx:/nginx
        - ./frontend/labyrinth/dist/:/dist
        - ./nginx/entrypoint.sh:/entrypoint.sh
        - ./nginx/watch.sh:/watch.sh
    environment:
        COMPOSE_CONVERT_WINDOWS_PATHS: 1
    healthcheck:
        test: curl -k -f https://localhost/insecure || service nginx restart
        interval: 20s
        timeout: 10s
        retries: 3
    ports:
        - "7210:443"

  lego:
    build: nginx
    restart: always
    volumes:
      - ./nginx:/nginx
      - ./nginx/lego.sh:/lego.sh
    env_file: 
      - nginx/.env


  # Mongo
  mongo:
    image: mongo
    ports:
      - 127.0.0.1:27017:27017
    networks:
      - labyrinth
    volumes:
      - ./data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: temp

  mongo-express:
    image: mongo-express:latest
    restart: always
    networks:
      - labyrinth
    ports:
      - 8071:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: temp
      ME_CONFIG_MONGODB_URL: mongodb://root:temp@mongo:27017/


  # Redis
  redis:
    image: bitnami/redis:latest
    restart: always
    environment:
      ALLOW_EMPTY_PASSWORD: "yes"
    ports:
      - 127.0.0.1:6379:6379
    networks:
      - labyrinth
    # volumes:
    #  - ./redis_data:/bitnami/redis/data

  alertmanager:
    build: alertmanager
    networks:
      - labyrinth
    volumes:
      - ./alertmanager:/src

  # Vulnerable server running on the network 
  sampledva:
    image: vulnerables/web-dvwa
    networks:
      - labyrinth
      
  # Sample Finder Cron
  samplecron:
    build: 
      context: .
      dockerfile: cron/Dockerfile
    volumes:
      - ./backend/:/src
      - ./cron:/cron
      - ./alertmanager:/alertmanager
    networks:
      - labyrinth
    environment: 
      MONGO_USERNAME: root
      MONGO_PASSWORD: temp
      MONGO_HOST: mongo
      REDIS_HOST: redis

  # Test Client
  sampleclient:
    build: "test_client"
    networks:
      - labyrinth
    volumes:
      - ./test_client:/src
      - ./test_client/sshd_config:/etc/ssh/sshd_config
  
networks:
  labyrinth:
    external: true
