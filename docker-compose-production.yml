version: "3.2"
services:

  # Will build a new version of static site on docker-compose up
  # Remove this service if you want to build the vue app manually
  devel:
    container_name: "labyrinth_devel"
    environment:
      COMPOSE_CONVERT_WINDOWS_PATHS: 1
      CHOKIDAR_USEPOLLING: "true"

    build: ./frontend
    # ports:
    #  - "8001:8000"
    #  - "8002:8080"
    # networks:
    #  - labyrinth
    volumes:
      - ./frontend:/src
      - /src/labyrinth/node_modules

  backend:
    build: 
      context: "backend"
      args:
        TZ: ${TZ}
    restart: always
    hostname: backend
    volumes:
      - ./backend/:/src
      - ./alertmanager:/alertmanager
      - ./frontend/labyrinth/public:/public
    networks:
      - labyrinth
    environment: 
      REDIS_HOST: redis
      PRODUCTION: 1

  frontend:
    image: nginx:latest
    restart: always
    depends_on:
      - lego
    networks:
      - labyrinth
    user: ${CURRENT_UID}
    command: /entrypoint.sh
    volumes:
        - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
        - ./nginx:/nginx
        - ./frontend/labyrinth/dist/:/dist:ro
        - ./nginx/entrypoint.sh:/entrypoint.sh
        - ./nginx/watch.sh:/watch.sh
    environment:
        COMPOSE_CONVERT_WINDOWS_PATHS: 1
    healthcheck:
        test: curl -k -f https://localhost/insecure || service nginx restart
        interval: 20s
        timeout: 10s
        retries: 3
    ports:
        - "443:443"




  lego:
    build: nginx
    restart: always
    volumes:
      - ./nginx:/nginx
      - ./nginx/lego.sh:/lego.sh
    env_file: 
      - nginx/.env


# Mongo
#  mongo:
#    image: mongo
#    restart: always
#    networks:
#      - labyrinth
#    volumes:
#      - ./data:/data/db
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: root
#      MONGO_INITDB_ROOT_PASSWORD: temp
#
  
  # Redis
  redis:
    image: bitnami/redis:latest
    restart: always
    environment:
      ALLOW_EMPTY_PASSWORD: "yes"
    networks:
      - labyrinth
    # volumes:
    #  - ./redis_data:/bitnami/redis/data

  alertmanager:
    build: 
      context: alertmanager
      args:
        TZ: ${TZ}
    restart: always
    networks:
      - labyrinth
    volumes:
      - ./alertmanager:/src

      
  # Scanner and Watcher Cron
  samplecron:
    build: 
      context: .
      dockerfile: cron/Dockerfile
      args:
        TZ: ${TZ}    
    restart: always
    volumes:
      - ./backend/:/src
      - ./cron:/cron
      - ./alertmanager:/alertmanager
    networks:
      - labyrinth
    environment: 
      REDIS_HOST: redis
      PRODUCTION: 1

networks:
  labyrinth:
    external: true
